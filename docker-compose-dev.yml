services:
  # Redis
  redis:
    image: redis:7.2-alpine
    container_name: ${REDIS_CONTAINER}
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    networks:
      - app_network
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      timeout: 20s
      retries: 10

  # Account Service
  accountservice:
    env_file:
      - .env
    build:
      context: accountService
      dockerfile: Dockerfile
    container_name: ${ACCOUNT_SERVICE}
    restart: always
    image: ${ACCOUNT_SERVICE}
    environment:
      - PROFILE_SERVICE_URL=${PROFILE_SERVICE_URL}
      - EMAIL_APP=${EMAIL_APP}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - EMAIL_PORT=${EMAIL_PORT}
      - MYSQL_URL=${MYSQL_URL}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_CONTAINER=${REDIS_CONTAINER}
      - REDIS_PORT=${REDIS_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - SENDGRID_MAIL_FROM=${SENDGRID_MAIL_FROM}
      - SENDGRID_HOST=${SENDGRID_HOST}
      - SENDGRID_PORT=${SENDGRID_PORT}
      - SENDGRID_NAME=${SENDGRID_NAME}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
    ports:
      - "${ACCOUNT_PORT}:${ACCOUNT_PORT}"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app_network

  # Message Service
  messageservice:
    env_file:
      - .env
    build:
      context: messageService
      dockerfile: Dockerfile
    container_name: ${MESSAGE_SERVICE}
    restart: always
    image: ${MESSAGE_SERVICE}
    environment:
      - MONGODB_MESSAGE_URL=${MONGODB_MESSAGE_URL}
      - REDIS_CONTAINER=${REDIS_CONTAINER}
      - REDIS_URL=${REDIS_URL}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_PORT=${REDIS_PORT}
      - PROFILE_SERVICE_URL=${PROFILE_SERVICE_URL}
      - ACCOUNT_SERVICE_URL=${ACCOUNT_SERVICE_URL}
    ports:
      - "${MESSAGE_PORT}:${MESSAGE_PORT}"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app_network

  # Notification Service
  notificationservice:
    env_file:
      - .env
    build:
      context: notificationService
      dockerfile: Dockerfile
    container_name: ${NOTIFICATION_SERVICE}
    restart: always
    image: ${NOTIFICATION_SERVICE}
    environment:
      - PROFILE_SERVICE_URL=${PROFILE_SERVICE_URL}
      - MONGODB_NOTIFICATION_URL=${MONGODB_NOTIFICATION_URL}
      - NOTIFICATION_SERVICE_URL_SOCKET=${NOTIFICATION_SERVICE_URL_SOCKET}
      - REDIS_CONTAINER=${REDIS_CONTAINER}
      - REDIS_URL=${REDIS_URL}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_PORT=${REDIS_PORT}
    ports:
      - "${NOTIFICATION_PORT}:${NOTIFICATION_PORT}"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app_network

  # Post Service
  postservice:
    env_file:
      - .env
    build:
      context: postService
      dockerfile: Dockerfile
    container_name: ${POST_SERVICE}
    restart: always
    image: ${POST_SERVICE}
    environment:
      - ACCOUNT_SERVICE_URL=${ACCOUNT_SERVICE_URL}
      - PROFILE_SERVICE_URL=${PROFILE_SERVICE_URL}
      - MONGODB_POST_URL=${MONGODB_POST_URL}
      - REDIS_CONTAINER=${REDIS_CONTAINER}
      - REDIS_URL=${REDIS_URL}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "${POST_PORT}:${POST_PORT}"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app_network

  # Profile Service
  profileservice:
    env_file:
      - .env
    build:
      context: profileService
      dockerfile: Dockerfile
    container_name: ${PROFILE_SERVICE}
    restart: always
    image: ${PROFILE_SERVICE}
    environment:
      - ACCOUNT_SERVICE_URL=${ACCOUNT_SERVICE_URL}
      - NOTIFICATION_SERVICE_URL=${NOTIFICATION_SERVICE_URL}
      - POST_SERVICE_URL=${POST_SERVICE_URL}
      - NEO4J_URL=${NEO4J_URL}
      - NEO4J_USERNAME=${NEO4J_USERNAME}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_CONTAINER=${REDIS_CONTAINER}
      - REDIS_PORT=${REDIS_PORT}
    ports:
      - "${PROFILE_PORT}:${PROFILE_PORT}"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app_network

  # Relationship Service
  relationshipservice:
    env_file:
      - .env
    build:
      context: relationshipService
      dockerfile: Dockerfile
    container_name: ${RELATIONSHIP_SERVICE}
    restart: always
    image: ${RELATIONSHIP_SERVICE}
    environment:
      - MONGODB_RELATION_URL=${MONGODB_RELATION_URL}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_CONTAINER=${REDIS_CONTAINER}
      - REDIS_PORT=${REDIS_PORT}
    ports:
      - "${RELATIONSHIP_PORT}:${RELATIONSHIP_PORT}"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app_network

  # Timeline Service
  timelineservice:
    env_file:
      - .env
    build:
      context: timelineService
      dockerfile: Dockerfile
    container_name: ${TIMELINE_SERVICE}
    restart: always
    image: ${TIMELINE_SERVICE}
    environment:
      - MONGODB_POST_URL=${MONGODB_POST_URL}
      - ACCOUNT_SERVICE_URL=${ACCOUNT_SERVICE_URL}
      - PROFILE_SERVICE_URL=${PROFILE_SERVICE_URL}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_CONTAINER=${REDIS_CONTAINER}
      - REDIS_PORT=${REDIS_PORT}
    ports:
      - "${TIMELINE_PORT}:${TIMELINE_PORT}"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app_network
  # API Gateway
  apigateway:
    env_file:
      - .env
    build:
      context: apigateway
      dockerfile: Dockerfile
    container_name: ${API_GATEWAY}
    image: ${API_GATEWAY}
    restart: always
    environment:
      - GATEWAY_PORT=${GATEWAY_PORT}
      - ACCOUNT_SERVICE_URL=${ACCOUNT_SERVICE_URL}
      - PROFILE_SERVICE_URL=${PROFILE_SERVICE_URL}
      - RELATIONSHIP_SERVICE_URL=${RELATIONSHIP_SERVICE_URL}
      - POST_SERVICE_URL=${POST_SERVICE_URL}
      - MESSAGE_SERVICE_URL=${MESSAGE_SERVICE_URL}
      - NOTIFICATION_SERVICE_URL=${NOTIFICATION_SERVICE_URL}
      - TIMELINE_SERVICE_URL=${TIMELINE_SERVICE_URL}
      - REDIS_CONTAINER=${REDIS_CONTAINER}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_PORT=${REDIS_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
    ports:
      - "${GATEWAY_PORT}:${GATEWAY_PORT}"
    depends_on:
      - redis
    networks:
      - app_network

networks:
  app_network:
    driver: bridge
    name: fsocial_network

volumes:
  redis_data:
    driver: local