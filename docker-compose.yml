services:
  # MongoDB Replica Set
  mongo1:
    image: mongo
    container_name: fsocial_primary
    restart: always
    environment:
      - MONGO_INITDB_REPLICASET=rs0
    command: mongod --replSet "rs0"
    ports:
      - "27001:27017"
    volumes:
      - fsocial_primary:/data/db
    networks:
      - app_network

  mongo2:
    image: mongo
    container_name: fsocial_secondary_1
    restart: always
    environment:
      - MONGO_INITDB_REPLICASET=rs0
    command: mongod --replSet "rs0"
    ports:
      - "27002:27017"
    volumes:
      - fsocial_secondary_1:/data/db
    networks:
      - app_network

  mongo3:
    image: mongo
    container_name: fsocial_secondary_2
    restart: always
    environment:
      - MONGO_INITDB_REPLICASET=rs0
    command: mongod --replSet "rs0"
    ports:
      - "27003:27017"
    volumes:
      - fsocial_secondary_2:/data/db
    networks:
      - app_network
  message:
    image: mongo:6.0 # Chỉ định phiên bản cụ thể
    container_name: message
    restart: always
    ports:
      - "27004:27017" # Ánh xạ cổng host:container
    volumes:
      - message_data:/data/db # Sử dụng named volume với tên rõ ràng
    networks:
      - app_network
    environment: # (Tùy chọn) Thêm biến môi trường để cấu hình MongoDB
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root
  notification:
    image: mongo:6.0 # Chỉ định phiên bản cụ thể
    container_name: notification
    restart: always
    ports:
      - "27005:27017" # Ánh xạ cổng host:container
    volumes:
      - notification_data:/data/db # Sử dụng named volume với tên rõ ràng
    networks:
      - app_network
    environment: # (Tùy chọn) Thêm biến môi trường để cấu hình MongoDB
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root

  # Redis
  redis:
    image: redis:latest
    container_name: replica_redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app_network

  # ZooKeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - app_network

#  # Kafka Broker
#  kafka:
#    image: confluentinc/cp-kafka:7.3.0
#    container_name: kafka
#    restart: always
#    depends_on:
#      - zookeeper
#    ports:
#      - "9094:9094"
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9094
#      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:9094
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
#    volumes:
#      - kafka_data:/var/lib/kafka/data
#    networks:
#      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  fsocial_primary:
  fsocial_secondary_1:
  fsocial_secondary_2:
  redis_data:
  zookeeper_data:
  kafka_data:
  message_data:
  notification_data: