app:
  services:
    profile: ${PROFILE_SERVICE_URL:http://localhost:8085}/profile
#openapi:
#  service:
#    api-docs: api-service
#    server: http://localhost:8080
#    title: API Service
#    version: 1.0.0
spring:
  kafka:
    bootstrap-servers: ${KAFKA_URL:localhost:9092}
    consumer:
      group-id: notification-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
  application:
    name: notificationService
  data:
    mongodb:
      uri: ${MONGODB_NOTIFICATION_URL:mongodb://admin:adminpassword@notification_mongo:27018/notification_db?authSource=admin}
      database: notification_db
    redis:
      host: ${REDIS_CONTAINER:localhost}  # Vì Redis chạy trên localhost
      port: ${REDIS_PORT:29092}  # Port từ docker-compose (REDIS_PORT từ .env)
      password: ${REDIS_PASSWORD:redispassword}
      database: 0
      timeout: 2000ms
      connect-timeout: 2000ms
      # Cấu hình connection pool cho Spring Data Redis
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          max-wait: 500ms
        shutdown-timeout: 200ms
  jpa:
    hibernate:
      ddl-auto: update

server:
  servlet:
    context-path: /notification
    session:
      timeout: 3m
  port: 8087

logging:
  level:
    org:
      springframework=DEBUG:
      springframework:
        security: DEBUG
        security.web.access.ExceptionTranslationFilter: DEBUG
        security.access.intercept.AbstractSecurityInterceptor: DEBUG
      hibernate:
        SQL: DEBUG
        type:
          descriptor:
            sql:
              BasicBinder: TRACE
        engine:
          transaction:
            internal:
              TransactionImpl: DEBUG
        event:
          internal:
            AbstractFlushingEventListener: DEBUG
